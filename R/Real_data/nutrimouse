library(MASS)
library(stats)
library(CVXR)
library(geigen)
library(pracma)
library(tidyverse)
library(CCA)
library(VGAM)
library(matlib)
library(PMA)
library(mvtnorm)
library(glmnet)
library(caret)


source("EfficientCCA/R/GCA/utils.R")
source("EfficientCCA/R/GCA/gca_to_cca.R")
source("EfficientCCA/R/GCA/init_process.R")
source("EfficientCCA/R/GCA/sgca_init.R")
source("EfficientCCA/R/GCA/sgca_tgd.R")
source("EfficientCCA/R/GCA/subdistance.R")
source("EfficientCCA/R/GCA/adaptive_lasso.R")

source('EfficientCCA/R/alternative_methods/SAR.R')
source('EfficientCCA/R/alternative_methods/Parkhomenko.R')
source('EfficientCCA/R/alternative_methods/Witten_CrossValidation.R')
source('EfficientCCA/R/alternative_methods/Waaijenborg.R')
source('EfficientCCA/R/scca_chao.R')

source("EfficientCCA/R/generate_examples.R")
source("EfficientCCA/R/evaluate_results.R")
source("EfficientCCA/R/EfficientCCA.R")
source("EfficientCCA/R/All_methods.R")
source("EfficientCCA/R/metrics.R")

set.seed(123)

data(nutrimouse)
X = as.matrix(nutrimouse$gene %>% mutate_all(~rank(.)))
Y = as.matrix(nutrimouse$lipid %>% mutate_all(~rank(.)))
X = scale(X, center = T, scale = T)
Y = scale(Y, center = T, scale = T)
p = ncol(X)
q = ncol(Y)

props = seq(0, 0.3, 0.05)
seeds = 1:30
r = 5

set.seed(0)

### Check CV Error

folds = createFolds(1:nrow(X), 8)
correlation <-c()
order = 1:length(folds)
for (i in  1:length(folds)){
  index = order[ifelse(i < length(folds), i + 1, (i+1)%%length(folds))]
  index2 =order[ifelse(i < length(folds) -1, i + 2, (i+2)%%length(folds))]
  print(c(i, index, index2))
  
  X.train = as.matrix(X)[-c(folds[[index]], folds[[index2]]),]
  Y.train = as.matrix(Y)[-c(folds[[index]],
                            folds[[index2]]),]
  n = nrow(X.train)
  
  for(lambda in seq(0, .2, length.out = 81)){
    final =  lasso_cca(X.train, Y.train, lambda =  lambda,  r= 5, niter = 2000)
    
    
    correlation <- rbind(
      correlation,
      c("CCA_graph_rrr",
        lambda,
        i,
        diag(cov(as.matrix(X)[-c(folds[[index]],
                                 folds[[index2]]),] %*% final$U,
                 as.matrix(Y)[-c(folds[[index]],
                                 folds[[index2]]),] %*%  final$V)),
        apply(((as.matrix(X)[-c(folds[[index]],
                                folds[[index2]]),] %*% final$U) -
                 (as.matrix(Y)[-c(folds[[index]],
                                  folds[[index2]]),] %*%  final$V))^2, 2, mean),
        diag(t(as.matrix(X)[folds[[index]],] %*% final$U) %*%
               (as.matrix(Y)[folds[[index]],] %*%  final$V)),
        diag(cor(as.matrix(X)[folds[[index]],] %*% final$U, (as.matrix(Y)[folds[[index]],] %*%  final$V))),
        apply(((as.matrix(X)[folds[[index]],] %*% final$U) -
                 (as.matrix(Y)[folds[[index]],] %*%  final$V))^2,2,mean),
        diag(t(as.matrix(X)[folds[[index2]],] %*% final$U) %*%
               (as.matrix(Y)[folds[[index2]],] %*%  final$V)),
        diag(cor(as.matrix(X)[folds[[index2]],] %*% final$U, (as.matrix(Y)[folds[[index2]],] %*%  final$V))),
        apply(((as.matrix(X)[folds[[index2]],] %*% final$U) -
                 (as.matrix(Y)[folds[[index2]],] %*%  final$V))^2,2,mean)
      ))
  }
  
  
  for (method in c("FIT_SAR_CV", "FIT_SAR_BIC", "Witten_Perm",
                   "Witten.CV", "Waaijenborg-Author", "Waaijenborg-CV",
                   "SCCA_Parkhomenko")){
    
    print(paste0("Starting ", method))
    tryCatch({
      test1<-additional_checks(X.train, Y.train,
                               S=NULL, 
                               rank=r, kfolds=8, 
                               method.type = method,
                               lambdax= 10^seq(-3,1, length.out = 30),
                               lambday =  0)
      final = list(U = test1$u, V = test1$v)
      
      correlation <- rbind(
        correlation,
        c(method,
          lambda,
          i,
          diag(cov(as.matrix(X)[-c(folds[[index]],
                                   folds[[index2]]),] %*% final$U,
                   as.matrix(Y)[-c(folds[[index]],
                                   folds[[index2]]),] %*%  final$V)),
          apply(((as.matrix(X)[-c(folds[[index]],
                                  folds[[index2]]),] %*% final$U) -
                   (as.matrix(Y)[-c(folds[[index]],
                                    folds[[index2]]),] %*%  final$V))^2, 2, mean),
          diag(t(as.matrix(X)[folds[[index]],] %*% final$U) %*%
                 (as.matrix(Y)[folds[[index]],] %*%  final$V)),
          diag(cor(as.matrix(X)[folds[[index]],] %*% final$U, (as.matrix(Y)[folds[[index]],] %*%  final$V))),
          apply(((as.matrix(X)[folds[[index]],] %*% final$U) -
                   (as.matrix(Y)[folds[[index]],] %*%  final$V))^2,2,mean),
          diag(t(as.matrix(X)[folds[[index2]],] %*% final$U) %*%
                 (as.matrix(Y)[folds[[index2]],] %*%  final$V)),
          diag(cor(as.matrix(X)[folds[[index2]],] %*% final$U, (as.matrix(Y)[folds[[index2]],] %*%  final$V))),
          apply(((as.matrix(X)[folds[[index2]],] %*% final$U) -
                   (as.matrix(Y)[folds[[index2]],] %*%  final$V))^2,2,mean)
        ))
    }, error = function(e) {
      # Print the error message
      cat("Error occurred in method", method, ":", conditionMessage(e), "\n")
      # Skip to the next iteration
    })
    
  }
  
  
  tryCatch({
    Mask <- matrix(0, (p + q), (p + q))
    idx1 <- 1:p
    idx2 <- (p+ 1):(p + q)
    Mask[idx1, idx1] <- matrix(1,p, p)
    Mask[idx2, idx2] <- matrix(1, q, q)
    
    Data = cbind(X.train, Y.train)
    S = cov(Data)
    sigma0hat <- S * Mask
    
    ag <- sgca_init(A=S, B=sigma0hat, rho=0.5 * sqrt(log( p + q)/n),
                    K=5,  maxiter=2000, trace=FALSE, fast = F) 
    ainit <- init_process(ag$Pi, 5) 
    test1 <- gca_to_cca(ainit, S, c(p, q))
    
    
    final = list(U = test1$u, V = test1$v)
    
    correlation <- rbind(
      correlation,
      c("Fantope",
        lambda,
        i,
        diag(cov(as.matrix(X)[-c(folds[[index]],
                                 folds[[index2]]),] %*% final$U,
                 as.matrix(Y)[-c(folds[[index]],
                                 folds[[index2]]),] %*%  final$V)),
        apply(((as.matrix(X)[-c(folds[[index]],
                                folds[[index2]]),] %*% final$U) -
                 (as.matrix(Y)[-c(folds[[index]],
                                  folds[[index2]]),] %*%  final$V))^2, 2, mean),
        diag(t(as.matrix(X)[folds[[index]],] %*% final$U) %*%
               (as.matrix(Y)[folds[[index]],] %*%  final$V)),
        diag(cor(as.matrix(X)[folds[[index]],] %*% final$U, (as.matrix(Y)[folds[[index]],] %*%  final$V))),
        apply(((as.matrix(X)[folds[[index]],] %*% final$U) -
                 (as.matrix(Y)[folds[[index]],] %*%  final$V))^2,2,mean),
        diag(t(as.matrix(X)[folds[[index2]],] %*% final$U) %*%
               (as.matrix(Y)[folds[[index2]],] %*%  final$V)),
        diag(cor(as.matrix(X)[folds[[index2]],] %*% final$U, (as.matrix(Y)[folds[[index2]],] %*%  final$V))),
        apply(((as.matrix(X)[folds[[index2]],] %*% final$U) -
                 (as.matrix(Y)[folds[[index2]],] %*%  final$V))^2,2,mean)
      ))
    
    
  }, error = function(e) {
    # Print the error message
    cat("Error occurred in Fantope ", conditionMessage(e), "\n")
    # Skip to the next iteration
  })
  
  tryCatch({
    
    
    test1 = scca_chao(X.train, Y.train, r = 5)
    
    final = list(U = test1$u, V = test1$v)
    
    correlation <- rbind(
      correlation,
      c("scca_chao",
        lambda,
        i,
        diag(cov(as.matrix(X)[-c(folds[[index]],
                                 folds[[index2]]),] %*% final$U,
                 as.matrix(Y)[-c(folds[[index]],
                                 folds[[index2]]),] %*%  final$V)),
        apply(((as.matrix(X)[-c(folds[[index]],
                                folds[[index2]]),] %*% final$U) -
                 (as.matrix(Y)[-c(folds[[index]],
                                  folds[[index2]]),] %*%  final$V))^2, 2, mean),
        diag(t(as.matrix(X)[folds[[index]],] %*% final$U) %*%
               (as.matrix(Y)[folds[[index]],] %*%  final$V)),
        diag(cor(as.matrix(X)[folds[[index]],] %*% final$U, (as.matrix(Y)[folds[[index]],] %*%  final$V))),
        apply(((as.matrix(X)[folds[[index]],] %*% final$U) -
                 (as.matrix(Y)[folds[[index]],] %*%  final$V))^2,2,mean),
        diag(t(as.matrix(X)[folds[[index2]],] %*% final$U) %*%
               (as.matrix(Y)[folds[[index2]],] %*%  final$V)),
        diag(cor(as.matrix(X)[folds[[index2]],] %*% final$U, (as.matrix(Y)[folds[[index2]],] %*%  final$V))),
        apply(((as.matrix(X)[folds[[index2]],] %*% final$U) -
                 (as.matrix(Y)[folds[[index2]],] %*%  final$V))^2,2,mean)
      ))
    
    
  }, error = function(e) {
    # Print the error message
    cat("Error occurred in scca_chao ", conditionMessage(e), "\n")
    # Skip to the next iteration
  })
  
  
  
}


correlation_df = data.frame(correlation)
colnames(correlation_df) = c("method", "lambda", "fold",
                             "train_cov1",  "train_cov2",    "train_cov3",  "train_cov4",   "train_cov5", 
                             "train_mse1",  "train_mse2",   "train_mse3",  "train_mse4", "train_mse5", 
                             "test_prod1",  "test_prod2",   "test_prod3",  "test_prod4", "test_prod5", 
                             "test_cor1",  "test_cor2",          "test_cor3",  "test_cor4", "test_cor5", 
                             "test_mse1", "test_mse2",  "test_mse3", "test_mse4",  "test_mse5",
                             "val_prod1",  "val_prod2",     "val_prod3",  "val_prod4",    "val_prod5",  
                             "val_cor1",  "val_cor2",    "val_cor3",  "val_cor4",    "val_cor5",  
                             "val_mse1",  "val_mse2", "val_mse3",  "val_mse4","val_mse5")
for (i in 3:ncol(correlation_df)){
  correlation_df[,i] = as.numeric(correlation_df[,i])
}
correlation_df$lambda[correlation_df$method == "Fantope"] = 1



summary_correlation = correlation_df %>% 
  mutate(test_mse = (test_mse1 + test_mse2 + test_mse3 + test_mse4 +test_mse5 )/5,
         train_mse = train_mse1 + train_mse2 +train_mse3 + train_mse4+train_mse5,
         val_mse =  (val_mse1 + val_mse2 + val_mse3 + val_mse4+val_mse5 )/5,
         test_prod = (test_prod1 + test_prod2 +  test_prod3+ test_prod4+ test_prod5)/5,
         test_cor = (test_cor1 + test_cor2  + test_cor3  + test_cor4  + test_cor5)/5,
         train_cov = (train_cov1 + train_cov2 + train_cov3+train_cov4+train_cov5)/5,
         val_prod = (val_prod1 + val_prod2 + val_prod3+ val_prod4 + val_prod5)/5,
         val_cor = (val_cor1 + val_cor2 + val_cor3 + val_cor4 + val_cor5)/5) %>%
  group_by(method, lambda) %>% summarise_all(mean, na.rm=TRUE)%>%
  arrange((val_mse)) %>% ungroup()

summary_correlation$lambda = as.numeric(summary_correlation$lambda )

summary_correlation$lambda = as.numeric(summary_correlation$lambda )
ggplot(summary_correlation %>% 
         filter(method == "CCA_graph_rrr")%>% ungroup())+
  geom_line(aes(x = as.numeric(lambda), y=test_mse))+
  geom_point(aes(x = as.numeric(lambda), y=test_mse))+
  scale_x_log10()


lambda_opt = summary_correlation$lambda[which.min(summary_correlation$val_mse[which(summary_correlation$method ==  "CCA_graph_rrr")])]
lambda_opt = summary_correlation$lambda[2]
relevant_correlations = summary_correlation %>% 
  dplyr::select(method,  val_mse, val_cor, test_mse, test_cor)

indices = c(2, which(relevant_correlations$method != "CCA_graph_rrr") )
print(relevant_correlations[indices, ])


### Check Classification Error


set.seed(12)
folds = createFolds(1:nrow(X), 8)
methods = c("SparseCCAR", c("FIT_SAR_CV", "FIT_SAR_BIC", "Witten_Perm",
                            "Witten.CV", "Waaijenborg-Author", "Waaijenborg-CV",
                            "SCCA_Parkhomenko"), "Fantope")

error_geno = matrix(0, 2, 9)
error_diet = matrix(0, 2, 9)
count_gene = matrix(0, 2, 9)
count_diet = matrix(0, 2, 9)



for (i in 1:length(folds)){
  test_ind = folds[[i]]
  train_ind = setdiff(1:40, test_ind)
  
  X.train = X[train_ind, ]
  Y.train = Y[train_ind, ]
  
  results = list()
  results[["SparseCCAR"]] =  lasso_cca(X.train, Y.train, r= 5, lambda = 0.155, niter = 2000)
  for (method in c("FIT_SAR_CV", "FIT_SAR_BIC", "Witten_Perm",
                   "Witten.CV", "Waaijenborg-Author", "Waaijenborg-CV",
                   "SCCA_Parkhomenko")){
    print(paste0("Starting ", method))
    tryCatch({
      test1<-additional_checks(X.train, Y.train,
                               S=NULL, 
                               rank=r, kfolds=8, 
                               method.type = method,
                               lambdax= 10^seq(-3,1, length.out = 30),
                               lambday =  0)
      final = list(U = test1$u, V = test1$v)
      results[[method]] = final
      
    }, error = function(e) {
      # Print the error message
      cat("Error occurred in method", method, ":", conditionMessage(e), "\n")
      # Skip to the next iteration
    })
    
  }
  
  tryCatch({
    n = nrow(X.train)
    Mask <- matrix(0, (p + q), (p + q))
    idx1 <- 1:p
    idx2 <- (p+ 1):(p + q)
    Mask[idx1, idx1] <- matrix(1,p, p)
    Mask[idx2, idx2] <- matrix(1, q, q)
    
    Data = cbind(X.train, Y.train)
    S = cov(Data)
    sigma0hat <- S * Mask
    
    ag <- sgca_init(A=S, B=sigma0hat, rho=0.5 * sqrt(log( p + q)/n),
                    K=5,  maxiter=1000, trace=FALSE, fast = F) ###needs to be changed to be a little more scalable
    ainit <- init_process(ag$Pi, 5) 
    test1 <- gca_to_cca(ainit, S, c(p, q))
    
    
    final = list(U = test1$u, V = test1$v)
    results[["Fantope"]] = final
    
    
  }, error = function(e) {
    # Print the error message
    cat("Error occurred in Fantope ", conditionMessage(e), "\n")
    # Skip to the next iteration
  })
  
  
  for(j in 1:9){
    
    tryCatch({
      XU = X %*% results[[methods[j]]]$U
      YV = Y %*% results[[methods[j]]]$V
      
      
      train_control <- trainControl(method = "cv", number = 10)
      
      data = data.frame( X = XU,  Y = YV,  genotype = (nutrimouse$genotype), diet = nutrimouse$diet)
      
      
      model1 <- train( genotype ~    Y.1 + Y.2 + Y.3 + Y.4 + Y.5,
                       data = data[train_ind,], method = "svmLinear3", trControl = train_control)
      
      predictions1 <- predict(model1, newdata = data[test_ind, ])
      
      error_geno[1, j] = error_geno[1, j]  + confusionMatrix(predictions1, data[test_ind, ]$genotype)$overall[1]
      count_gene[1, j] = count_gene[1, j] + 1
      
      model1 <- train( genotype ~    Y.1 + Y.2 + Y.3 + Y.4 + Y.5,
                       data = data[train_ind,], method = "rf", trControl = train_control)
      
      predictions1 <- predict(model1, newdata = data[test_ind, ])
      
      error_geno[2, j] = error_geno[2, j]  + confusionMatrix(predictions1, data[test_ind, ]$genotype)$overall[1]
      count_gene[2, j] = count_gene[2, j] + 1
      
      
      
      
      model2 <- train( diet ~  X.1 + X.2 + X.3 + X.4 + X.5,
                       data = data[train_ind,], method = "svmLinear3" , trControl = train_control)
      
      predictions2 <- predict(model2, newdata = data[test_ind, ])
      
      error_diet[1, j] =  error_diet[1, j]  + confusionMatrix(predictions2, data[test_ind, ]$diet)$overall[1]
      count_diet[1, j] = count_diet[1, j] + 1
      model2 <- train( diet ~  X.1 + X.2 + X.3 + X.4 + X.5,
                       data = data[train_ind,], method = "rf" , trControl = train_control)
      
      predictions2 <- predict(model2, newdata = data[test_ind, ])
      
      error_diet[2, j] =  error_diet[2, j]  + confusionMatrix(predictions2, data[test_ind, ]$diet)$overall[1]
      count_diet[2, j] = count_diet[2, j] + 1
    }, error = function(e) {
      # Print the error message
      cat("Error occurred in", methods[j], conditionMessage(e), "\n")
      # Skip to the next iteration
    })
  }
  
}


error_geno / count_gene
error_diet / count_diet

df = data.frame(methods = methods, "Genotype Accuracy (SVM)" = error_geno[1, ]/count_gene[1, ],
                "Genotyp Accuracy (rf)" = error_geno[2, ]/count_gene[2, ],
                "Diet Accuracy (SVM)" = error_diet[1, ]/count_diet[1, ], "Diet Accuracy (SVM)" = error_diet[2, ]/count_diet[2, ])





### Visualization

set.seed(123)

train_ind = 1:40
test_ind = 1:40

result1 =  lasso_cca(X[train_ind, ], Y[train_ind, ], r= 5, niter = 2000, lambda = .155 * sqrt(3/4))

result1 = additional_checks(X[train_ind, ], Y[train_ind, ],
                            S=NULL, 
                            rank=r, kfolds=5, 
                            method.type = "FIT_SAR_CV",
                            lambdax= 10^seq(-3,1, length.out = 30),
                            lambday =  0)

legend_order = c("lin", "sun", "fish",
                 "ref", "coc")
my_colors = c(  "red","orange",  "dodgerblue",
                "black", "brown")
labels_n =   c("LIN", "SUN", "FISH",
               "REF", "COC")

XU = X[test_ind, ] %*%  result1$U
colnames(XU) = paste0("XU", 1:5)
YV = Y[test_ind, ] %*% result1$V
colnames(YV) = paste0("YV", 1:5)
df = data.frame(XU, YV, gen =  nutrimouse$genotype[test_ind], diet = nutrimouse$diet[test_ind ])
U = result1$U
V = result1$V
colnames(U) = paste0("U", 1:5)
colnames(V) = paste0("V", 1:5)
ggplot(df)+
  geom_point(aes(x=XU1, y=XU2), shape = 1, size = 2)+
  geom_point(aes(x=YV1, y=YV2), shape = 1, size = 2)+
  scale_color_manual(values = my_colors, breaks = legend_order,
                     labels = labels_n) +
  geom_segment(aes(x = XU1, y = XU2, xend = YV1, yend = YV2),
               arrow = arrow(length = unit(0.3, "cm")))+
  xlab("Canonical variate 1") +
  ylab("Canonical variate 2")+
  labs(colour = "Diet", shape = "Genotype")
p1 = ggplot(df, aes(x=YV1, y=YV2, colour=diet))+
  geom_point(aes(shape=gen), size = 4)+
  scale_color_manual(values = my_colors, breaks = legend_order,
                     labels = labels_n) +
  scale_fill_manual(values = my_colors, breaks = legend_order,
                    labels = labels_n) +
  stat_ellipse(level = 0.8)+
  # ggforce::geom_mark_ellipse(aes(fill = diet,
  #                                color = diet))+
  xlab(expression(Xu[1]))+
  ylab(expression(Xu[2]))+
  labs(colour = "Diet", shape = "Genotype")+
  theme_bw()
#guides(color=guide_legend(nrow=2), shape = guide_legend(nrow=2))
p2 = ggplot(df, aes(x=YV3, y=YV4, colour=diet))+
  geom_point(aes(shape=gen), size = 4)+
  scale_color_manual(values = my_colors, breaks = legend_order,
                     labels = labels_n) +
  stat_ellipse(level = 0.8)+
  xlab(expression(Xu[3]))+
  ylab(expression(Xu[4]))+
  labs(colour = "Diet", shape = "Genotype")+
  theme_bw()


p3 = ggplot(df, aes(x=YV1, y=YV5, colour=diet))+
  geom_point(aes(shape=gen), size = 4)+
  scale_color_manual(values = my_colors, breaks = legend_order,
                     labels = labels_n) +
  stat_ellipse(level = 0.8)+
  xlab(expression(Xu[1]))+
  ylab(expression(Xu[5]))+
  labs(colour = "Diet", shape = "Genotype")+
  theme_bw()
library(ggpubr)
ggarrange(p1, p2, p3, common.legend = T, nrow = 1)


library(plotly)

p <- plot_ly(data = df, 
             x = ~YV1, 
             y = ~YV2, 
             z = ~YV3, 
             color = ~diet, 
             symbol = ~gen, 
             symbols = c("circle",  "cross", "x", "triangle-up", "triangle-down"),  # specify symbols manually
             type = "scatter3d", 
             mode = "markers")
p

#visualization


result = lasso_cca(X, Y, r= 5, lambda =   .155 * sqrt(3/4), niter = 2000)
plot(sort( rowSums(result$U^2), T, index.return = T)$x )
plot(sort( rowSums(result$V^2), T, index.return = T)$x )

colnames(Y)[sort( rowSums(result$V^2), T, index.return = T)$ix ]
colnames(X)[(sort( rowSums(result$U^2), T, index.return = T)$ix )]

library(reshape2)
ynames = colnames(Y) 


df_V = data.frame(result$V)
colnames(df_V) = c("CD-1", "CD-2", "CD-3","CD-4", "CD-5")
df_V["Hepatic Fatty Acids"] = colnames(Y)
df_V = pivot_longer(df_V, cols=-c("Hepatic Fatty Acids"))

theme_set(theme_bw(base_size = 18))
ggplot(df_V, aes(x = value, y = reorder(`Hepatic Fatty Acids`, value), fill=name)) +
  geom_bar(stat = "identity", show.legend = FALSE) +
  facet_wrap(~ name, scale="free_y", nrow=1) +
  geom_vline(xintercept = 0, linetype = "dashed") +
  labs(y = "Hepatic Fatty Acids", x = "Response Intensity") + 
  labs(fill = "Canonical\nDirection") + theme_bw()

ggplot(df_V %>% filter(abs(value) > 1e-1) %>% mutate(row = ifelse(name %in% c("CD-4", "CD-5"), 2,1)), aes(x = value, y = reorder(`Hepatic Fatty Acids`, value), fill=name)) +
  geom_bar(stat = "identity", show.legend = FALSE) +
  facet_wrap(.~name, scale="free_y") +
  geom_vline(xintercept = 0, linetype = "dashed") +
  labs(y = "Hepatic Fatty Acids", x = "Loading Value") + 
  labs(fill = "Canonical\nDirection")


Uhat_comp = result$U
rownames(Uhat_comp) = colnames(X)
print(Uhat_comp)
heatmap(Uhat_comp)
df_U = data.frame(Uhat_comp)
colnames(df_U) = c("CD-1", "CD-2", "CD-3","CD-4", "CD-5")
df_U["Gene"] = colnames(X)
df_U = pivot_longer(df_U, cols=-c("Gene"))



# Example new labels
# Reorder the levels of the x-axis variable based on the ordering column
#df_U$Gene <- factor(df_U$Gene, levels = levels(df$Gene)[order(df_U$name)])
# Assuming your questions are in a column named 'question'
theme_set(theme_bw(base_size = 18))
ggplot(df_U %>% filter(abs(value) >   1e-1), aes(x = value, y = reorder(`Gene`, value), 
                                                 fill=name)) +
  geom_bar(stat = "identity", show.legend = FALSE) +
  facet_wrap(~name, scales = "free_y") +
  geom_vline(xintercept = 0, linetype = "dashed") +
  labs(y = "Gene", x = "Response Intensity") + 
  labs(fill = "Canonical\nDirection") + theme_bw()

